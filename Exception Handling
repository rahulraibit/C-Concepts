Throw

Signals the occurrence of an exception during program execution.

using System;

public class Example
{
   public static void Main()
   {
      var gen = new NumberGenerator();
      int index = 10;
      try {
          int value = gen.GetNumber(index);
          Console.WriteLine($"Retrieved {value}");
      }
      catch (IndexOutOfRangeException e) 
      {
         Console.WriteLine($"{e.GetType().Name}: {index} is outside the bounds of the array");
      }
   }
}
// The example displays the following output:
//        IndexOutOfRangeException: 10 is outside the bounds of the array


Re-throwing an exception

using System;

public class Sentence
{
   public Sentence(string s)
   {
      Value = s;
   }

   public string Value { get; set; }

   public char GetFirstCharacter()
   {
      try {
         return Value[0];
        }
      catch (NullReferenceException e) {
         throw;   
      } 
   }
}

public class Example 
{
   public static void Main()
   {
      var s = new Sentence(null);
      Console.WriteLine($"The first character is {s.GetFirstCharacter()}");
   }
}
// The example displays the following output:
//    Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.
//       at Sentence.GetFirstCharacter()
//       at Example.Main()


try-catch

The try-catch statement consists of a try block followed by one or more catch clauses, which specify handlers for different exceptions.

It is possible to use more than one specific catch clause in the same try-catch statement. 
In this case, the order of the catch clauses is important because the catch clauses are examined in order. 
Catch the more specific exceptions before the less specific ones. The compiler produces an error if you order your catch blocks so that a later block can never be reached.


Using catch arguments is one way to filter for the exceptions you want to handle. 
You can also use an exception filter that further examines the exception to decide whether to handle it. 
If the exception filter returns false, then the search for a handler continues.

catch (ArgumentException e) when (e.ParamName == "â€¦")  
{  
}

try - final

By using a finally block, you can clean up any resources that are allocated in a try block, and you can run code even if an exception occurs in the try block. 
Typically, the statements of a finally block run when control leaves a try statement. 
The transfer of control can occur as a result of normal execution, of execution of a break, continue, goto, or return statement, or of propagation of an exception out of the try statement.

Within a handled exception, the associated finally block is guaranteed to be run. 
However, if the exception is unhandled, execution of the finally block is dependent on how the exception unwind operation is triggered. T
hat, in turn, is dependent on how your computer is set up.

Usually, when an unhandled exception ends an application, whether or not the finally block is run is not important. 
However, if you have statements in a finally block that must be run even in that situation, one solution is to add a catch block to the try-finally statement. 